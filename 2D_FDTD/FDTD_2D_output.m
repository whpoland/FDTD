%% FDTD 2D Simulation Animation Generator
%  William Poland
clc
clear

%% Customizable Values
%   ****************** file name ******************************************
test_name = "sine_src"; % name generated by C++ code
% ofile_mod = "_nolim"; % modifier for output MP4 file
ofile_mod = ""; % modifier for output MP4 file
%   ***********************************************************************

%   ********* simulation values *******************************************
upp_lim = 0.5; % maximum caxis value 
low_lim = -0.5; % minimum caxis value
use_lim = 1; % turn caxis limits on/off
map_res = 12; % number of bits to make rows in our color map (resolution)
% tolerance around region we want to make white (blank)
tol_factor = 0.02; % multiplies absolute average of upper and lower limits
%   ***********************************************************************

%% Simulation
input_file = "/Users/williampoland/FDTD/2D/raw/" + test_name + ".txt";
% each line: (t, x, y, z, Ez, Hx, Hy, eps_r, mu_r, e_cond, m_cond)
file_id = fopen(input_file);
fgetl(file_id); % discard 1st header line
% now extract TMAX, NX, NY values
T_MAX = str2double(fgetl(file_id));
NUM_X = str2double(fgetl(file_id));
NUM_Y = str2double(fgetl(file_id));
T_NEXT = NUM_X * NUM_Y; % number of lines before advancing to next time index
fgetl(file_id); % discard 2nd header line

file_format = '%f %f';
file_size = [4 Inf];
data = fscanf(file_id, file_format, file_size);
data = data'; % transpose array so orientation is correct

output_file = "/Users/williampoland/FDTD/2D/" + test_name + ofile_mod + ".mp4";
v = VideoWriter(output_file, 'MPEG-4');
v.FrameRate = 8;
open(v);

% M = repmat(struct([]),T_MAX,1); % doesn't work

% create a custom color map
my_map = turbo(2^map_res);
if (use_lim)
    step = (upp_lim - low_lim)/length(my_map); % step size for each color (row)
    zero_row = -low_lim / step + 1;
    des_tol = tol_factor * mean([upp_lim abs(low_lim)]);
    tol = ceil(des_tol / step);
    % tol = 0;
    for i = ceil(zero_row - tol):floor(zero_row + tol)
        if (i > 0 && i < length(my_map))
            my_map(i,:) = [1 1 1];
        end
    end
end
% extract data and generate plots
for t = 1:T_MAX
    vals = zeros(NUM_X, NUM_Y);
    for x = 1:NUM_X
        for y = 1:NUM_Y
            curr_row = (double(t)-1)*NUM_X*NUM_Y + (double(x)-1)*NUM_X + (double(y)-1) + 1;
            curr_val = data(curr_row, 4);
            vals(x,y) = curr_val;
            fprintf("(t,x,y,row, Ez)=(%d,%d,%d,%d,%f)\n",t-1,x-1,y-1,curr_row,curr_val);
%             if (curr_val ~= 0)
%                 fprintf("******val not 0 @ (t,x,y)=(%d,%d,%d)******\n",t-1,x-1,y-1);
%             end
        end
    end
    figure(1);
    hold on
    % plot conductive geometry features
    % --- 
    
    % plot electric field
    X = 0:1:(size(vals,1)-1);
    Y = 0:1:(size(vals,2)-1);
    s = pcolor(X,Y,transpose(vals)); % need to transpose so that (x,y) matches C++ code
    xlim([0 (size(vals,1)-1)]);
    ylim([0 (size(vals,2)-1)]) 
    colormap(my_map);
    if (use_lim)
        caxis([low_lim upp_lim]);
    end
    c = colorbar;
    c.Label.String = '|Ez|';
    s.FaceColor = 'interp';
    s.EdgeColor = 'none';
    
    % plot conductive geometry features
    % ---
    hold off
    
    xlabel('x');
    ylabel('y');
    title("Magnitude of Ez(x,y) @ t = " + t);
    M(t) = getframe(1);
    writeVideo(v,M(t));
%     fprintf("Finished loop t=%d\n", i-1);

end

close(v);
fprintf("MP4 file created");

% figure(2)
% movie(M,1,80)


