%% FDTD 2D Simulation Animation Generator
%  William Poland
clc
clear

%% Customizable Values
%   ****************** file name ******************************************
test_name = "poster_empty_20GHz"; % name generated by C++ code
ofile_mod = ""; % modifier for output MP4 file
%   ***********************************************************************

%   ********* simulation values *******************************************
use_lim = 1; % turn caxis limits on/off
plot_epsr = 1; % plot dielectric geometry features
plot_ec = 1; % plot conductive geometry features
linear_cmap = 0; % restrict colormap to vary linearly

upp_lim = 1; % maximum caxis value 
low_lim = -1; % minimum caxis value

map_res = 16; % number of bits to make rows in our color map (resolution)
% tolerance around region we want to make white (blank)
tol_factor = 1e-4; % multiplies absolute average of upper and lower limits
nonlin_factor = 4; % scale intensity of nonlinearity
num_data_types = 6; % the number of data points in the text file
% current format: (t, x, y, Ez, eps_r, ec)
%   ***********************************************************************

%% Simulation
input_file = "/Users/williampoland/FDTD/2D/raw/" + test_name + ".txt";
% each line: (t, x, y, z, Ez, Hx, Hy, eps_r, mu_r, e_cond, m_cond)
file_id = fopen(input_file);
fgetl(file_id); % discard 1st header line

% now extract header values
first_line = fgetl(file_id);
header_info = str2double(split(first_line));
FREQ = header_info(1);
T_MAX = header_info(2);
NUM_X = header_info(3);
NUM_Y = header_info(4);
DEL_T = header_info(5);
DEL_X = header_info(6);
DEL_Y = header_info(7);

T_NEXT = NUM_X * NUM_Y; % number of lines before advancing to next time index
fgetl(file_id); % discard 2nd header line

file_format = '%f %f';
file_size = [num_data_types Inf];
data = fscanf(file_id, file_format, file_size);
data = data'; % transpose array so orientation is correct

output_file = "/Users/williampoland/FDTD/2D/" + test_name + ofile_mod + ".mp4";
v = VideoWriter(output_file, 'MPEG-4');
v.FrameRate = 8;
open(v);

% M = repmat(struct([]),T_MAX,1); % doesn't work

% create a custom color map
my_map = turbo(2^map_res);
if (use_lim)
    step = (upp_lim - low_lim)/length(my_map); % step size for each color (row)
    zero_row = -low_lim / step + 1;
    des_tol = tol_factor * mean([upp_lim abs(low_lim)]);
    tol = ceil(des_tol / step);
    % tol = 0;
    for i = ceil(zero_row - tol):floor(zero_row + tol)
        if (i > 0 && i < length(my_map))
            my_map(i,:) = [1 1 1];
        end
    end
    if (~linear_cmap) % nonlinearize color map
        dist_center = 0; % center point for nonlinear distortion
        var = 1:length(my_map); 
        var = var - (dist_center - low_lim) * length(var) / (upp_lim - low_lim);
        var = nonlin_factor * var / max(abs(var));
        var = sign(var) .* exp(abs(var));
        var = var - min(var);
        var = var * (2^map_res - 1) / max(var) + 1;
        my_map = interp1(var, my_map, 1:(2^map_res));
    end
end
% preallocate arrays/matrices for speed
E_vals = zeros(NUM_X, NUM_Y);
ec_xvals = zeros(1,0);
ec_yvals = zeros(1,0);
epsr_xvals = zeros(1,0);
epsr_yvals = zeros(1,0);
% extract data and generate plots
for t = 1:T_MAX
    
    for x = 1:NUM_X
        for y = 1:NUM_Y
            curr_row = (double(t)-1)*NUM_X*NUM_Y + (double(x)-1)*NUM_X + (double(y)-1) + 1;
            curr_Ez = data(curr_row, 4);
            curr_epsr = data(curr_row, 5);
            curr_ec = data(curr_row, 6);
            E_vals(x,y) = curr_Ez;
            if (t == 1) % only need to do this once, since geometry/medium doesn't change with time
                if (plot_epsr && curr_epsr ~= 1)
                    epsr_xvals(end+1) = x;
                    epsr_yvals(end+1) = y;
                end
                if (plot_ec && curr_ec ~= 0)
                    ec_xvals(end+1) = x;
                    ec_yvals(end+1) = y;
                end
            end
            
            fprintf("(t,x,y,row,Ez,eps_r,ec)=(%d,%d,%d,%d,%f,%d,%d)\n",t-1,x-1,y-1,curr_row, ...
            curr_Ez,curr_epsr, curr_ec);
        end
    end
    % check to make sure we don't plot empty arrays
    if (isempty(epsr_xvals))
        plot_epsr = 0; % skip plotting if no dielectrics present
    end
    if (isempty(ec_xvals))
        plot_ec = 0; % skip plotting if no conductivity present
    end
    
    fig1 = figure(1);
       
    % plot electric field
    X = DEL_X*(0:1:(NUM_X-1));
    Y = DEL_Y*(0:1:(NUM_Y-1));
    s = pcolor(X,Y,transpose(E_vals)); % need to transpose again to reorient (x,y) axes
    xlim([X(1) X(end)]);
    ylim([Y(1) Y(end)]);
    colormap(my_map);
    if (use_lim)
        caxis([low_lim upp_lim]);
    end
    c = colorbar;
    c.Label.String = '|E_z| [V/m]';
    c.FontSize = 12;
    s.FaceColor = 'interp';
    s.EdgeColor = 'none';
    
    % plot geometry features
    hold on
    if (plot_epsr) % plot dielectric features
        scttr_X = DEL_X * epsr_xvals;
        scttr_Y = DEL_Y * epsr_yvals;
        scatter(scttr_X, scttr_Y, 5, '*', 'black');
        die_const = data(epsr_xvals(1)*NUM_X + epsr_yvals(1) + 1,5); % reread dielectric value from data
        text(scttr_X(1) - DEL_Y*3,scttr_Y(end) + DEL_X*3, "Dielectric of " + die_const);
    end
    
    if (plot_ec) % plot conductive features
        scttr_X = DEL_X * ec_xvals;
        scttr_Y = DEL_Y * ec_yvals;
        scatter(scttr_X, scttr_Y, 25, 'filled', 'square', ...
        'MarkerEdgeColor',[0 0 0], 'MarkerFaceColor',[0 0 0]);
    end
    hold off
    
    xlabel('x [m]','FontSize',12);
    ylabel('y [m]','FontSize',12);
    title('Parallel Plate Waveguide TE Simulation');
    subtitle("Magnitude of E_z(x,y) @" + floor(FREQ/1e9) + "GHz @t = " + (t*DEL_T*1e12) + "ps");
    M(t) = getframe(1);
    writeVideo(v,M(t));
%     fprintf("Finished loop t=%d\n", i-1);

end

close(v);
fprintf("MP4 file created");

% figure(2)
% movie(M,1,80)


